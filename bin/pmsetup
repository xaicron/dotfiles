#!/usr/bin/env perl
use strict;
use warnings;
use File::Basename;
use File::Path;
use File::Spec;
use YAML;
use Config;
use Text::Xslate;
use IO::Prompt::Simple qw(prompt);

my $path   = File::Spec->catfile($ENV{HOME}, "/.pmsetuprc");
my $config = eval { YAML::LoadFile($path) } || {};

my $save;
while (! $config->{author}) {
    $config->{author} = prompt 'Your name';
    $save++;
}

while (! $config->{email}) {
    $config->{email} = prompt 'Your email';
    $save++;
}

my $modname = shift @ARGV or die "Usage: pmsetup module\n";
   $modname =~ s/-/::/g;

write_plugin_files($modname, $config);

END {
    YAML::DumpFile($path, $config) if $save;
}

sub write_plugin_files {
    my($module, $config) = @_;

    # $module = "Foo::Bar"
    # $dist   = "Foo-Bar"
    # $path   = "Foo/Bar.pm"
    my @pkg  = split /::/, $module;
    my $dist = join "-", @pkg;
    my $path = join("/", @pkg) . ".pm";

    my $dist_dir = sprintf 'p5-%s', $dist;

    mkdir $dist_dir, 0777;
    chdir $dist_dir;

    my @template = YAML::Load(join '', <DATA>);
    my $vars = {
        module    => $module,
        dist      => $dist,
        dist_dir  => $dist_dir,
        path      => $path,
        config    => $config,
        localtime => scalar localtime,
        year      => (localtime)[5] + 1900,
    };

    for my $tmpl (@template) {
        my $file = $tmpl->{file};
           $file =~ s/(\$\w+)/$1/eeg;
        write_file($file, $tmpl->{template}, $vars);
    }

    if (prompt "git init?", { yn => 1, default => 'y' }) {
        !system 'git', 'init' or die $?;
        !system 'git', 'add', '.gitignore' or die $?;

        opendir my $dh, '.' or die $!;
        while (my $name = readdir $dh) {
            next if $name =~ /^\.{1,2}$/ || $name eq '.git';
            !system 'git', 'add', $name or die $?;
        }
        !system 'git', 'commit', '-m', 'initial commit' or die $?;
    }

    if (prompt "make test?", { yn => 1, default => 'y' }) {
        my $make = $Config{make} || 'make';
        !system $^X, 'Makefile.PL' or die $?;
        !system $make, 'manifest' or die $?;
        !system $make, 'test' or die $?;
        !system $make, 'realclean' or die $?;
    }
}

sub write_file {
    my($path, $template, $vars) = @_;

    if (-e $path) {
        my $ans = prompt "$path exists. Override?", { yn => 1, default => 'n' };
        return if $ans !~ /[Yy]/;
    }

    my $dir = File::Basename::dirname($path);
    unless (-e $dir) {
        warn "Creating directory $dir\n";
        File::Path::mkpath($dir, 1, 0777);
    }

    my $tx = Text::Xslate->new(syntax => 'TTerse', cache => 0);
    my $content = $tx->render_string($template, $vars);

    warn "Creating $path\n";
    open my $out, ">:raw", $path or die "$path: $!";
    print $out $content;
    close $out;
}

__DATA__
---
file: Makefile.PL
template: |
  use inc::Module::Install;
  use Module::Install::AuthorTests;

  name '[% dist %]';
  all_from 'lib/[% path %]';

  #requires '';
  
  test_requires 'Test::More', 0.98;
  
  tests join q{ }, map { sprintf 't%s.t', '/*' x $_ } 1..3;
  author_tests 'xt';

  repository 'http://github.com/[% config.author %]/[% dist_dir %]/';
  bugtracker 'http://github.com/[% config.author %]/[% dist_dir %]/issues';
  
  WriteAll;
---
file: t/00_compile.t
template: |
  use strict;
  use warnings;
  use Test::More tests => 1;

  BEGIN { use_ok '[% module %]' }
---
file: xt/01_podspell.t
template: |
  use strict;
  use warnings;
  use Test::More;
  use Test::Requires 'Test::Spelling';
  use Config;
  use File::Spec;
  use ExtUtils::MakeMaker;

  my %cmd_map = (
      spell    => 'spell',
      aspell   => 'aspell list -l en',
      ispell   => 'ispell -l',
      hunspell => 'hunspell -d en_US -l',
  );

  my $spell_cmd;
  for my $dir ((split /$Config::Config{path_sep}/, $ENV{PATH}), '.') {
      next if $dir eq '';
      ($spell_cmd) = map { $cmd_map{$_} } grep {
          my $abs = File::Spec->catfile($dir, $_);
          -x $abs or MM->maybe_command($abs);
      } keys %cmd_map;
      last if $spell_cmd;
  }
  $spell_cmd = $ENV{SPELL_CMD} if $ENV{SPELL_CMD};
  plan skip_all => "spell command are not available." unless $spell_cmd;
  add_stopwords(map { split /[\s\:\-]/ } <DATA>);
  set_spell_cmd($spell_cmd);
  $ENV{LANG} = 'C';
  all_pod_files_spelling_ok('lib');

  __DATA__
  [% module %]

  # personal section
  [% config.author %]
  [% config.email %]
---
file: xt/02_pod.t
template: |
  use strict;
  use warnings;
  use Test::More;
  use Test::Requires { 'Test::Pod' => 1.00 };

  all_pod_files_ok();
---
file: xt/03_pod-coverage.t
template: |
  use strict;
  use warnings;
  use Test::More;
  use Test::Requires { 'Test::Pod::Coverage' => 1.04 };

  unless ($ENV{TEST_POD_COVERAGE}) {
      plan skip_all => "\$ENV{TEST_POD_COVERAGE} is not set.";
      exit;
  }

  all_pod_coverage_ok({also_private => [qw(unimport BUILD DEMOLISH)]});
---
file: xt/04_perlcritic.t
template: |
  use strict;
  use warnings;
  use Test::More;
  use Test::Requires { 'Test::Perl::Critic' => 1.02 };

  Test::Perl::Critic->import(-profile => 'xt/perlcriticrc');

  all_critic_ok('lib');
---
file: xt/05_script-shebang.t
template: |
  use strict;
  use warnings;
  use Test::More;
  use Test::Requires 'Test::Script::Shebang';
  use File::Find qw/find/;
  
  my @files;
  for my $dir (qw/bin script/) {
      next unless -d $dir;
      find {
          no_chdir => 1,
          wanted   => sub { push @files, $_ if -f },
      }, $dir;
  }
  plan skip_all => 'script not found' unless @files;
  
  check_shebang(@files);
  
  done_testing;
---
file: xt/perlcriticrc
template: |
  [TestingAndDebugging::ProhibitNoStrict]
  allow=refs
  [-Subroutines::ProhibitSubroutinePrototypes]
---
file: Changes
template: |
  Revision history for Perl extension [% module %]

  0.01  [% localtime %]
      - original version
---
file: lib/$path
template: |
  package [% module %];

  use strict;
  use warnings;
  use 5.008_001;
  our $VERSION = '0.01';

  1;
  __END__

  =encoding utf-8

  =for stopwords

  =head1 NAME

  [% module %] -

  =head1 SYNOPSIS

    use [% module %];

  =head1 DESCRIPTION

  [% module %] is

  =head1 AUTHOR

  [% config.author %] E<lt>[% config.email %]E<gt>

  =head1 COPYRIGHT

  Copyright [% year %] - [% config.author %]

  =head1 LICENSE

  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.

  =head1 SEE ALSO

  =cut
---
file: MANIFEST.SKIP
template: |
  \bRCS\b
  \bCVS\b
  \.svn/
  \.git/
  ^MANIFEST\.
  ^Makefile$
  ~$
  \.old$
  ^blib/
  ^pm_to_blib
  ^MakeMaker-\d
  \.gz$
  \.shipit
  \.gitignore
  \ppport.h
  ^MYMETA\.
---
file: README
template: |
  This is Perl module [% module %].

  INSTALLATION

  [% module %] installation is straightforward. If your CPAN shell is set up,
  you should just be able to do

      % cpan [% module %]
  or

      % cpanm [% module %]

  Download it, unpack it, then build it as per the usual:

      % perl Makefile.PL
      % make && make test

  Then install it:

      % make install

  DOCUMENTATION

  [% module %] documentation is available as in POD. So you can do:

      % perldoc [% module %]

  to read the documentation online with your favorite pager.

  [% config.author %]
---
file: .shipit
template: |
  steps = FindVersion, ChangeVersion, CheckChangeLog, DistTest, Commit, Tag, MakeDist, UploadCPAN
  git.push_to = origin
---
file: .gitignore
template: |
  cover_db
  MYMETA.*
  META.yml
  Makefile
  blib
  inc
  pm_to_blib
  MANIFEST
  MANIFEST.bak
  Makefile.old
  nytprof*
  ppport.h
  xs/*c
  xs/*o
  xs/*obj
  *.bs
  *.def
  *.old
  dll*
  *~
---
file: .proverc
template: |
  --exec "perl -Ilib -MTest::Flatten -MTest::Name::FromLine"
  --timer
  --merge
  --trap
  --color
  -w
